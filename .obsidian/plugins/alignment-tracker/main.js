/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AlignmentTrackerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AlignmentTrackerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("alignmenttracker", (source, el, ctx) => {
      const values = this.parseSource(source);
      const final_values = this.calculateValues(values);
      this.renderAlignmentGrid(final_values, el);
    });
  }
  // Parses the content of the code block
  parseSource(source) {
    const values = {
      L: 0,
      C: 0,
      G: 0,
      E: 0
    };
    source.split("\n").forEach((line) => {
      const [key, value] = line.split(":");
      if (key && value) {
        values[key.trim()] = parseInt(value.trim());
      }
    });
    return values;
  }
  // Calculate Alignment Values
  calculateValues(values) {
    const final_values = {
      LG: 0,
      LN: 0,
      LE: 0,
      NG: 0,
      N: 0,
      NE: 0,
      CG: 0,
      CN: 0,
      CE: 0
    };
    let total = values.L + values.C + values.G + values.E;
    let N_LC = Math.floor((values.L + values.C) / 2);
    let N_GE = Math.floor((values.G + values.E) / 2);
    let scale = 10 / total;
    final_values.LG = Math.floor((values.L + values.G) * scale);
    final_values.LN = Math.floor((values.L + N_GE) * scale);
    final_values.LE = Math.floor((values.L + values.E) * scale);
    final_values.NG = Math.floor((N_LC + values.G) * scale);
    final_values.N = Math.floor((N_LC + N_GE) * scale);
    final_values.NE = Math.floor((N_LC + values.E) * scale);
    final_values.CG = Math.floor((values.C + values.G) * scale);
    final_values.CN = Math.floor((values.C + N_GE) * scale);
    final_values.CE = Math.floor((values.C + values.E) * scale);
    return final_values;
  }
  // Renderizes the grid using HTML
  renderAlignmentGrid(values, el) {
    const grid = document.createElement("div");
    grid.className = "alignment-grid";
    const alignments = [
      { name: "LG", value: values.LG },
      { name: "NG", value: values.NG },
      { name: "CG", value: values.CG },
      { name: "LN", value: values.LN },
      { name: "N", value: values.N },
      { name: "CN", value: values.CN },
      { name: "LE", value: values.LE },
      { name: "NE", value: values.NE },
      { name: "CE", value: values.CE }
    ];
    alignments.forEach((align) => {
      const cell = document.createElement("div");
      cell.className = "alignment-cell";
      cell.setAttribute("data-value", align.value.toString());
      cell.textContent = align.name;
      grid.appendChild(cell);
    });
    el.appendChild(grid);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsaWdubWVudFRyYWNrZXJQbHVnaW4gZXh0ZW5kcyBQbHVnaW5cbntcbiAgICBhc3luYyBvbmxvYWQoKVxuICAgIHtcbiAgICAgICAgLy8gUmVnaXN0ZXJzIHRoZSBibG9jayBcImFsaWdubWVudHRyYWNrZXJcIlxuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJhbGlnbm1lbnR0cmFja2VyXCIsIChzb3VyY2UsIGVsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMucGFyc2VTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsX3ZhbHVlcyA9IHRoaXMuY2FsY3VsYXRlVmFsdWVzKHZhbHVlcyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckFsaWdubWVudEdyaWQoZmluYWxfdmFsdWVzLCBlbCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyB0aGUgY29udGVudCBvZiB0aGUgY29kZSBibG9ja1xuICAgIHBhcnNlU291cmNlKHNvdXJjZTogc3RyaW5nKVxuICAgIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgICAgICAgTDogMCwgQzogMCxcbiAgICAgICAgICAgIEc6IDAsIEU6IDAsXG4gICAgICAgIH07XG4gICAgICAgIHNvdXJjZS5zcGxpdChcIlxcblwiKS5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gbGluZS5zcGxpdChcIjpcIik7XG4gICAgICAgICAgICBpZiAoa2V5ICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2tleS50cmltKCldID0gcGFyc2VJbnQodmFsdWUudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIEFsaWdubWVudCBWYWx1ZXNcbiAgICBjYWxjdWxhdGVWYWx1ZXModmFsdWVzOiBhbnkpXG4gICAge1xuICAgICAgY29uc3QgZmluYWxfdmFsdWVzID0ge1xuICAgICAgICAgIExHOiAwLCBMTjogMCwgTEU6IDAsXG4gICAgICAgICAgTkc6IDAsIE46ICAwLCBORTogMCxcbiAgICAgICAgICBDRzogMCwgQ046IDAsIENFOiAwLFxuICAgICAgfTtcblxuICAgICAgLy8gR2V0IHRvdGFsIHZhcmlhYmxlc1xuICAgICAgbGV0IHRvdGFsID0gdmFsdWVzLkwgKyB2YWx1ZXMuQyArIHZhbHVlcy5HICsgdmFsdWVzLkU7XG4gICAgICBsZXQgTl9MQyA9IE1hdGguZmxvb3IoKHZhbHVlcy5MICsgdmFsdWVzLkMpLzIpO1xuICAgICAgbGV0IE5fR0UgPSBNYXRoLmZsb29yKCh2YWx1ZXMuRyArIHZhbHVlcy5FKS8yKTtcblxuICAgICAgLy8gR2V0IHRoZSBtdWx0aXBseWluZyBmYWN0b3JcbiAgICAgIGxldCBzY2FsZSA9IDEwLjAgLyB0b3RhbDtcblxuICAgICAgLy8gR2VuZXJhdGUgYWxsIHRoZSB2YWx1ZXM6XG4gICAgICAvLy8gTGF3ZnVsbCBjb2x1bW5cbiAgICAgIGZpbmFsX3ZhbHVlcy5MRyA9IE1hdGguZmxvb3IoKHZhbHVlcy5MICsgdmFsdWVzLkcpICogc2NhbGUpO1xuICAgICAgZmluYWxfdmFsdWVzLkxOID0gTWF0aC5mbG9vcigodmFsdWVzLkwgKyBOX0dFKSAgICAgKiBzY2FsZSk7XG4gICAgICBmaW5hbF92YWx1ZXMuTEUgPSBNYXRoLmZsb29yKCh2YWx1ZXMuTCArIHZhbHVlcy5FKSAqIHNjYWxlKTtcblxuICAgICAgLy8vIE5ldXRyYWwgY29sdW1uXG4gICAgICBmaW5hbF92YWx1ZXMuTkcgPSBNYXRoLmZsb29yKChOX0xDICsgdmFsdWVzLkcpICogc2NhbGUpO1xuICAgICAgZmluYWxfdmFsdWVzLk4gID0gTWF0aC5mbG9vcigoTl9MQyArIE5fR0UpICAgICAqIHNjYWxlKTtcbiAgICAgIGZpbmFsX3ZhbHVlcy5ORSA9IE1hdGguZmxvb3IoKE5fTEMgKyB2YWx1ZXMuRSkgKiBzY2FsZSk7XG5cbiAgICAgIC8vLyBDaGFvdGljIGNvbHVtblxuICAgICAgZmluYWxfdmFsdWVzLkNHID0gTWF0aC5mbG9vcigodmFsdWVzLkMgKyB2YWx1ZXMuRykgKiBzY2FsZSk7XG4gICAgICBmaW5hbF92YWx1ZXMuQ04gPSBNYXRoLmZsb29yKCh2YWx1ZXMuQyArIE5fR0UpICAgICAqIHNjYWxlKTtcbiAgICAgIGZpbmFsX3ZhbHVlcy5DRSA9IE1hdGguZmxvb3IoKHZhbHVlcy5DICsgdmFsdWVzLkUpICogc2NhbGUpO1xuXG4gICAgICByZXR1cm4gZmluYWxfdmFsdWVzO1xuICAgIH1cblxuICAgIC8vIFJlbmRlcml6ZXMgdGhlIGdyaWQgdXNpbmcgSFRNTFxuICAgIHJlbmRlckFsaWdubWVudEdyaWQodmFsdWVzOiBhbnksIGVsOiBIVE1MRWxlbWVudClcbiAgICB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBncmlkLmNsYXNzTmFtZSA9IFwiYWxpZ25tZW50LWdyaWRcIjtcblxuICAgICAgICBjb25zdCBhbGlnbm1lbnRzID0gW1xuICAgICAgICAgICAgeyBuYW1lOiBcIkxHXCIsIHZhbHVlOiB2YWx1ZXMuTEcgfSxcbiAgICAgICAgICAgIHsgbmFtZTogXCJOR1wiLCB2YWx1ZTogdmFsdWVzLk5HIH0sXG4gICAgICAgICAgICB7IG5hbWU6IFwiQ0dcIiwgdmFsdWU6IHZhbHVlcy5DRyB9LFxuICAgICAgICAgICAgeyBuYW1lOiBcIkxOXCIsIHZhbHVlOiB2YWx1ZXMuTE4gfSxcbiAgICAgICAgICAgIHsgbmFtZTogXCJOXCIsICB2YWx1ZTogdmFsdWVzLk4gIH0sXG4gICAgICAgICAgICB7IG5hbWU6IFwiQ05cIiwgdmFsdWU6IHZhbHVlcy5DTiB9LFxuICAgICAgICAgICAgeyBuYW1lOiBcIkxFXCIsIHZhbHVlOiB2YWx1ZXMuTEUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogXCJORVwiLCB2YWx1ZTogdmFsdWVzLk5FIH0sXG4gICAgICAgICAgICB7IG5hbWU6IFwiQ0VcIiwgdmFsdWU6IHZhbHVlcy5DRSB9XG4gICAgICAgIF07XG5cbiAgICAgICAgYWxpZ25tZW50cy5mb3JFYWNoKGFsaWduID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgY2VsbC5jbGFzc05hbWUgPSBcImFsaWdubWVudC1jZWxsXCI7XG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgYWxpZ24udmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gYWxpZ24ubmFtZTtcbiAgICAgICAgICAgIGdyaWQuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGdyaWQpO1xuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBMkY7QUFFM0YsSUFBcUIseUJBQXJCLGNBQW9ELHVCQUNwRDtBQUFBLEVBQ0ksTUFBTSxTQUNOO0FBRUksU0FBSyxtQ0FBbUMsb0JBQW9CLENBQUMsUUFBUSxJQUFJLFFBQVE7QUFDN0UsWUFBTSxTQUFTLEtBQUssWUFBWSxNQUFNO0FBQ3RDLFlBQU0sZUFBZSxLQUFLLGdCQUFnQixNQUFNO0FBQ2hELFdBQUssb0JBQW9CLGNBQWMsRUFBRTtBQUFB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
